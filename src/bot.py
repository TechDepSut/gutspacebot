import os
from asyncio import sleep
from vkbottle import Bot, Keyboard, Text, API
from vkbottle import BaseStateGroup, KeyboardButtonColor
from vkbottle.bot import Message
from utils.bookingtime import *
from utils.sheetsconnect import *

bot = Bot(os.environ["token"])
api = API(token=os.environ["token"])


class Branch(BaseStateGroup):
    HELLO = 0
    BOOKING = 1
    QUESTION = 2
    BOOKINGEND = 3


@bot.on.message(text="–ù–∞—á–∞—Ç—å")
async def start(m: Message) -> None:
    keyboard = Keyboard(one_time=True)
    keyboard.add(Text("–ë—Ä–æ–Ω—å"), color=KeyboardButtonColor.PRIMARY)
    keyboard.row()
    keyboard.add(Text("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"), color=KeyboardButtonColor.PRIMARY)
    await m.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", keyboard=keyboard)
    await bot.state_dispenser.set(m.peer_id, Branch.HELLO)


@bot.on.message(state=Branch.HELLO, text="–ë—Ä–æ–Ω—å")
async def reg(m: Message) -> None:
    await m.answer(
        "–î–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n\n–ù–æ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º —è –ø–æ–∑–Ω–∞–∫–æ–º–ª—é —Ç–µ–±—è —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Å—Ç–∞:\n 1.–°–µ–∞–Ω—Å –≤ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–µ –¥–ª–∏—Ç—Å—è 2 —á–∞—Å–∞\n 2.–ù–µ–ª—å–∑—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π —Å–µ–∞–Ω—Å, –ø–æ–∫–∞ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ –≤—Ä–µ–º—è —Ç–µ–∫—É—â–µ–≥–æ\n3. –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–æ –≤ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–µ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –µ–≥–æ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã: —Å 10 –¥–æ 18\n\n–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –≤–≤–µ–¥–∏ –§–ò–û."
    )
    await bot.state_dispenser.set(m.peer_id, Branch.BOOKING)


@bot.on.message(state=Branch.BOOKING)
async def time(m: Message) -> None:
    btime = await timebuttons()
    if len(btime) == 0:
        keyboard = Keyboard(one_time=True)
        keyboard.add(Text("–ë—Ä–æ–Ω—å"), color=KeyboardButtonColor.PRIMARY)
        keyboard.row()
        keyboard.add(Text("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"), color=KeyboardButtonColor.PRIMARY)
        await m.answer(
            "–ö–æ–º–∞–Ω–¥–∞ –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å 10 –¥–æ 18 —á–∞—Å–æ–≤ –∏ –≥–æ—Ç–æ–≤–∞ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–∏ —á–∞—Å—ã. –í –æ—Å—Ç–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –º—ã –æ—Ç–¥—ã—Ö–∞–µ–º –∏ –≤–∞–º —Å–æ–≤–µ—Ç—É–µ–ºüíô",
            keyboard=keyboard,
        )
        await bot.state_dispenser.set(m.peer_id, Branch.HELLO, name=str(m.text))
    elif btime[0] == 'Full':
        keyboard = Keyboard(one_time=True)
        keyboard.add(Text("–ë—Ä–æ–Ω—å"), color=KeyboardButtonColor.PRIMARY)
        keyboard.row()
        keyboard.add(Text("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"), color=KeyboardButtonColor.PRIMARY)
        await m.answer(
            "–ö–∞–∂–µ—Ç—Å—è —É –Ω–∞—Å –∞–Ω—à–ª–∞–≥üôä\n\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—Å–µ –º–µ—Å—Ç–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ —Å–µ–∞–Ω—Å—ã —É–∂–µ –∑–∞–Ω—è—Ç—ã. –í–æ–∑–≤—Ä–∞—â–∞–π—Å—è —á—É—Ç—å –ø–æ–∑–∂–µ –∏ –∑–∞–±–∏—Ä–∞–π —Å–≤–æ–µ –º–µ—Å—Ç–æ –≤ SutSpace!",
            keyboard=keyboard,
        )
        await bot.state_dispenser.set(m.peer_id, Branch.HELLO, name=str(m.text))
    else:
        keyboard = Keyboard(one_time=True)
        for i in btime:
            keyboard.add(Text(i), color=KeyboardButtonColor.PRIMARY)
        await m.answer(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–∞–Ω—Å–∞:",
            keyboard=keyboard,
        )
        await bot.state_dispenser.set(m.peer_id, Branch.BOOKINGEND, name=str(m.text))


@bot.on.message(state=Branch.BOOKINGEND)
async def bookingComplete(m: Message):
    keyboard = Keyboard(one_time=True)
    keyboard.add(Text("–ë—Ä–æ–Ω—å"), color=KeyboardButtonColor.PRIMARY)
    keyboard.row()
    keyboard.add(Text("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"), color=KeyboardButtonColor.PRIMARY)

    if await bookingCheck(m.text, m.peer_id):
        await m.answer("–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è", keyboard=keyboard)
        await bot.state_dispenser.set(m.peer_id, Branch.HELLO)
    else:
        await m.answer(
            "–ñ–¥–µ–º —Ç–µ–±—è –≤ SutSpace!\n\n–ó–∞ 15 –º–∏–Ω—É—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–≤–æ–µ–≥–æ —Å–µ–∞–Ω—Å–∞ —è –ø—Ä–∏—à–ª—é —Ç–µ–±–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µüíô",
            keyboard=keyboard,
        )
        await bookingDB(m.text, m.peer_id)
        await person_add(m.text, m.state_peer.payload["name"])
        await bot.state_dispenser.set(m.peer_id, Branch.HELLO)
        await notification(m.peer_id)


@bot.on.message(state=Branch.HELLO, text="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def question(m: Message) -> None:
    await m.answer("–ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å")
    await bot.state_dispenser.set(m.peer_id, Branch.QUESTION)


@bot.on.message(state=Branch.QUESTION)
async def questionComplete(m: Message):
    keyboard = Keyboard(one_time=True)
    keyboard.add(Text("–ë—Ä–æ–Ω—å"), color=KeyboardButtonColor.PRIMARY)
    await m.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –°–æ–≤—Å–µ–º —Å–∫–æ—Ä–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∫–æ–≤–æ—Ä–∫–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∏—Ç —Ç–µ–±–µüíô",
        keyboard=keyboard,
    )
    await bot.state_dispenser.set(m.peer_id, Branch.HELLO)


async def notification(peer):
    await sleep(6300)
    await api.messages.send(
        peer_id=peer,
        message="–ü—Å, –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–≤–æ–µ–≥–æ —Å–µ–∞–Ω—Å–∞ –æ—Å—Ç–∞–ª–æ—Å—å 15 –º–∏–Ω—É—Ç...\n–ë—ã–ª–∏ —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ SutSpace, –¥–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—áüíô",
        random_id=0,
    )


if __name__ == "__main__":
    bot.run_forever()
